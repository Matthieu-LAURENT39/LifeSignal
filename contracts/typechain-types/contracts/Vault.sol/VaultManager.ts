/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface VaultManagerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "allAuthorizedContacts"
      | "assignContactToVault"
      | "createVault"
      | "deleteVault"
      | "getAllAuthorizedContacts"
      | "getDecryptionKey"
      | "getMultipleVaultsInfo"
      | "getUserVaultCount"
      | "getUserVaults"
      | "getVaultAuthorizedContacts"
      | "getVaultContactAtIndex"
      | "getVaultContactCount"
      | "getVaultInfo"
      | "isAuthorizedContact"
      | "isVaultContact"
      | "isVaultOwner"
      | "isVaultReleased"
      | "releaseVault"
      | "removeContactFromVault"
      | "updateEncryptionKey"
      | "updateVaultMetadata"
      | "userContract"
      | "userVaults"
      | "vaultExists"
      | "vaults"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ContactAssigned"
      | "ContactRemoved"
      | "EncryptionKeyUpdated"
      | "VaultCreated"
      | "VaultMetadataUpdated"
      | "VaultReleased"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "allAuthorizedContacts",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "assignContactToVault",
    values: [string, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createVault",
    values: [string, string, AddressLike[], string, string]
  ): string;
  encodeFunctionData(functionFragment: "deleteVault", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getAllAuthorizedContacts",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDecryptionKey",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getMultipleVaultsInfo",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserVaultCount",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserVaults",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getVaultAuthorizedContacts",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getVaultContactAtIndex",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getVaultContactCount",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getVaultInfo",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isAuthorizedContact",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isVaultContact",
    values: [string, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isVaultOwner",
    values: [string, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isVaultReleased",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "releaseVault",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeContactFromVault",
    values: [string, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateEncryptionKey",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateVaultMetadata",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "userContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "userVaults",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "vaultExists", values: [string]): string;
  encodeFunctionData(functionFragment: "vaults", values: [string]): string;

  decodeFunctionResult(
    functionFragment: "allAuthorizedContacts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assignContactToVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deleteVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllAuthorizedContacts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDecryptionKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMultipleVaultsInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserVaultCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserVaults",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVaultAuthorizedContacts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVaultContactAtIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVaultContactCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVaultInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAuthorizedContact",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isVaultContact",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isVaultOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isVaultReleased",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "releaseVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeContactFromVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateEncryptionKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateVaultMetadata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "userVaults", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "vaultExists",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vaults", data: BytesLike): Result;
}

export namespace ContactAssignedEvent {
  export type InputTuple = [vaultId: string, contact: AddressLike];
  export type OutputTuple = [vaultId: string, contact: string];
  export interface OutputObject {
    vaultId: string;
    contact: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ContactRemovedEvent {
  export type InputTuple = [vaultId: string, contact: AddressLike];
  export type OutputTuple = [vaultId: string, contact: string];
  export interface OutputObject {
    vaultId: string;
    contact: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EncryptionKeyUpdatedEvent {
  export type InputTuple = [vaultId: string];
  export type OutputTuple = [vaultId: string];
  export interface OutputObject {
    vaultId: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VaultCreatedEvent {
  export type InputTuple = [vaultId: string, owner: AddressLike, name: string];
  export type OutputTuple = [vaultId: string, owner: string, name: string];
  export interface OutputObject {
    vaultId: string;
    owner: string;
    name: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VaultMetadataUpdatedEvent {
  export type InputTuple = [vaultId: string, name: string];
  export type OutputTuple = [vaultId: string, name: string];
  export interface OutputObject {
    vaultId: string;
    name: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VaultReleasedEvent {
  export type InputTuple = [vaultId: string, releasedAt: BigNumberish];
  export type OutputTuple = [vaultId: string, releasedAt: bigint];
  export interface OutputObject {
    vaultId: string;
    releasedAt: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface VaultManager extends BaseContract {
  connect(runner?: ContractRunner | null): VaultManager;
  waitForDeployment(): Promise<this>;

  interface: VaultManagerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  allAuthorizedContacts: TypedContractMethod<
    [arg0: BigNumberish],
    [string],
    "view"
  >;

  assignContactToVault: TypedContractMethod<
    [_vaultId: string, _contact: AddressLike],
    [void],
    "nonpayable"
  >;

  createVault: TypedContractMethod<
    [
      _vaultId: string,
      _name: string,
      _contacts: AddressLike[],
      _encryptionKey: string,
      _iv: string
    ],
    [void],
    "nonpayable"
  >;

  deleteVault: TypedContractMethod<[_vaultId: string], [void], "nonpayable">;

  getAllAuthorizedContacts: TypedContractMethod<[], [string[]], "view">;

  getDecryptionKey: TypedContractMethod<
    [_vaultId: string],
    [[string, string] & { encryptionKey: string; iv: string }],
    "view"
  >;

  getMultipleVaultsInfo: TypedContractMethod<
    [_vaultIds: string[]],
    [
      [string[], string[], string[], bigint[], boolean[]] & {
        ids: string[];
        names: string[];
        owners: string[];
        statuses: bigint[];
        isReleasedArray: boolean[];
      }
    ],
    "view"
  >;

  getUserVaultCount: TypedContractMethod<
    [_user: AddressLike],
    [bigint],
    "view"
  >;

  getUserVaults: TypedContractMethod<[_user: AddressLike], [string[]], "view">;

  getVaultAuthorizedContacts: TypedContractMethod<
    [_vaultId: string],
    [string[]],
    "view"
  >;

  getVaultContactAtIndex: TypedContractMethod<
    [_vaultId: string, _index: BigNumberish],
    [string],
    "view"
  >;

  getVaultContactCount: TypedContractMethod<
    [_vaultId: string],
    [bigint],
    "view"
  >;

  getVaultInfo: TypedContractMethod<
    [_vaultId: string],
    [
      [string, string, string, string[], bigint, bigint, bigint, boolean] & {
        id: string;
        name: string;
        owner: string;
        authorizedContacts: string[];
        status: bigint;
        createdAt: bigint;
        lastUpdated: bigint;
        isReleased: boolean;
      }
    ],
    "view"
  >;

  isAuthorizedContact: TypedContractMethod<
    [arg0: AddressLike],
    [boolean],
    "view"
  >;

  isVaultContact: TypedContractMethod<
    [_vaultId: string, _contact: AddressLike],
    [boolean],
    "view"
  >;

  isVaultOwner: TypedContractMethod<
    [_vaultId: string, _user: AddressLike],
    [boolean],
    "view"
  >;

  isVaultReleased: TypedContractMethod<[_vaultId: string], [boolean], "view">;

  releaseVault: TypedContractMethod<[_vaultId: string], [void], "nonpayable">;

  removeContactFromVault: TypedContractMethod<
    [_vaultId: string, _contact: AddressLike],
    [void],
    "nonpayable"
  >;

  updateEncryptionKey: TypedContractMethod<
    [_vaultId: string, _newEncryptionKey: string, _newIv: string],
    [void],
    "nonpayable"
  >;

  updateVaultMetadata: TypedContractMethod<
    [_vaultId: string, _name: string],
    [void],
    "nonpayable"
  >;

  userContract: TypedContractMethod<[], [string], "view">;

  userVaults: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;

  vaultExists: TypedContractMethod<[arg0: string], [boolean], "view">;

  vaults: TypedContractMethod<
    [arg0: string],
    [
      [
        string,
        string,
        string,
        bigint,
        string,
        string,
        bigint,
        bigint,
        boolean
      ] & {
        id: string;
        name: string;
        owner: string;
        status: bigint;
        encryptionKey: string;
        iv: string;
        createdAt: bigint;
        lastUpdated: bigint;
        isReleased: boolean;
      }
    ],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "allAuthorizedContacts"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "assignContactToVault"
  ): TypedContractMethod<
    [_vaultId: string, _contact: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createVault"
  ): TypedContractMethod<
    [
      _vaultId: string,
      _name: string,
      _contacts: AddressLike[],
      _encryptionKey: string,
      _iv: string
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "deleteVault"
  ): TypedContractMethod<[_vaultId: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getAllAuthorizedContacts"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getDecryptionKey"
  ): TypedContractMethod<
    [_vaultId: string],
    [[string, string] & { encryptionKey: string; iv: string }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getMultipleVaultsInfo"
  ): TypedContractMethod<
    [_vaultIds: string[]],
    [
      [string[], string[], string[], bigint[], boolean[]] & {
        ids: string[];
        names: string[];
        owners: string[];
        statuses: bigint[];
        isReleasedArray: boolean[];
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserVaultCount"
  ): TypedContractMethod<[_user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getUserVaults"
  ): TypedContractMethod<[_user: AddressLike], [string[]], "view">;
  getFunction(
    nameOrSignature: "getVaultAuthorizedContacts"
  ): TypedContractMethod<[_vaultId: string], [string[]], "view">;
  getFunction(
    nameOrSignature: "getVaultContactAtIndex"
  ): TypedContractMethod<
    [_vaultId: string, _index: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "getVaultContactCount"
  ): TypedContractMethod<[_vaultId: string], [bigint], "view">;
  getFunction(
    nameOrSignature: "getVaultInfo"
  ): TypedContractMethod<
    [_vaultId: string],
    [
      [string, string, string, string[], bigint, bigint, bigint, boolean] & {
        id: string;
        name: string;
        owner: string;
        authorizedContacts: string[];
        status: bigint;
        createdAt: bigint;
        lastUpdated: bigint;
        isReleased: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "isAuthorizedContact"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isVaultContact"
  ): TypedContractMethod<
    [_vaultId: string, _contact: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isVaultOwner"
  ): TypedContractMethod<
    [_vaultId: string, _user: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isVaultReleased"
  ): TypedContractMethod<[_vaultId: string], [boolean], "view">;
  getFunction(
    nameOrSignature: "releaseVault"
  ): TypedContractMethod<[_vaultId: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "removeContactFromVault"
  ): TypedContractMethod<
    [_vaultId: string, _contact: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateEncryptionKey"
  ): TypedContractMethod<
    [_vaultId: string, _newEncryptionKey: string, _newIv: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateVaultMetadata"
  ): TypedContractMethod<
    [_vaultId: string, _name: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "userContract"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "userVaults"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "vaultExists"
  ): TypedContractMethod<[arg0: string], [boolean], "view">;
  getFunction(
    nameOrSignature: "vaults"
  ): TypedContractMethod<
    [arg0: string],
    [
      [
        string,
        string,
        string,
        bigint,
        string,
        string,
        bigint,
        bigint,
        boolean
      ] & {
        id: string;
        name: string;
        owner: string;
        status: bigint;
        encryptionKey: string;
        iv: string;
        createdAt: bigint;
        lastUpdated: bigint;
        isReleased: boolean;
      }
    ],
    "view"
  >;

  getEvent(
    key: "ContactAssigned"
  ): TypedContractEvent<
    ContactAssignedEvent.InputTuple,
    ContactAssignedEvent.OutputTuple,
    ContactAssignedEvent.OutputObject
  >;
  getEvent(
    key: "ContactRemoved"
  ): TypedContractEvent<
    ContactRemovedEvent.InputTuple,
    ContactRemovedEvent.OutputTuple,
    ContactRemovedEvent.OutputObject
  >;
  getEvent(
    key: "EncryptionKeyUpdated"
  ): TypedContractEvent<
    EncryptionKeyUpdatedEvent.InputTuple,
    EncryptionKeyUpdatedEvent.OutputTuple,
    EncryptionKeyUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "VaultCreated"
  ): TypedContractEvent<
    VaultCreatedEvent.InputTuple,
    VaultCreatedEvent.OutputTuple,
    VaultCreatedEvent.OutputObject
  >;
  getEvent(
    key: "VaultMetadataUpdated"
  ): TypedContractEvent<
    VaultMetadataUpdatedEvent.InputTuple,
    VaultMetadataUpdatedEvent.OutputTuple,
    VaultMetadataUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "VaultReleased"
  ): TypedContractEvent<
    VaultReleasedEvent.InputTuple,
    VaultReleasedEvent.OutputTuple,
    VaultReleasedEvent.OutputObject
  >;

  filters: {
    "ContactAssigned(string,address)": TypedContractEvent<
      ContactAssignedEvent.InputTuple,
      ContactAssignedEvent.OutputTuple,
      ContactAssignedEvent.OutputObject
    >;
    ContactAssigned: TypedContractEvent<
      ContactAssignedEvent.InputTuple,
      ContactAssignedEvent.OutputTuple,
      ContactAssignedEvent.OutputObject
    >;

    "ContactRemoved(string,address)": TypedContractEvent<
      ContactRemovedEvent.InputTuple,
      ContactRemovedEvent.OutputTuple,
      ContactRemovedEvent.OutputObject
    >;
    ContactRemoved: TypedContractEvent<
      ContactRemovedEvent.InputTuple,
      ContactRemovedEvent.OutputTuple,
      ContactRemovedEvent.OutputObject
    >;

    "EncryptionKeyUpdated(string)": TypedContractEvent<
      EncryptionKeyUpdatedEvent.InputTuple,
      EncryptionKeyUpdatedEvent.OutputTuple,
      EncryptionKeyUpdatedEvent.OutputObject
    >;
    EncryptionKeyUpdated: TypedContractEvent<
      EncryptionKeyUpdatedEvent.InputTuple,
      EncryptionKeyUpdatedEvent.OutputTuple,
      EncryptionKeyUpdatedEvent.OutputObject
    >;

    "VaultCreated(string,address,string)": TypedContractEvent<
      VaultCreatedEvent.InputTuple,
      VaultCreatedEvent.OutputTuple,
      VaultCreatedEvent.OutputObject
    >;
    VaultCreated: TypedContractEvent<
      VaultCreatedEvent.InputTuple,
      VaultCreatedEvent.OutputTuple,
      VaultCreatedEvent.OutputObject
    >;

    "VaultMetadataUpdated(string,string)": TypedContractEvent<
      VaultMetadataUpdatedEvent.InputTuple,
      VaultMetadataUpdatedEvent.OutputTuple,
      VaultMetadataUpdatedEvent.OutputObject
    >;
    VaultMetadataUpdated: TypedContractEvent<
      VaultMetadataUpdatedEvent.InputTuple,
      VaultMetadataUpdatedEvent.OutputTuple,
      VaultMetadataUpdatedEvent.OutputObject
    >;

    "VaultReleased(string,uint64)": TypedContractEvent<
      VaultReleasedEvent.InputTuple,
      VaultReleasedEvent.OutputTuple,
      VaultReleasedEvent.OutputObject
    >;
    VaultReleased: TypedContractEvent<
      VaultReleasedEvent.InputTuple,
      VaultReleasedEvent.OutputTuple,
      VaultReleasedEvent.OutputObject
    >;
  };
}
