/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface VaultInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addAuthorizedContact"
      | "debugAuth"
      | "getAllAuthorizedContacts"
      | "getOwner"
      | "getVaultData"
      | "getVaultInfo"
      | "isContactAuthorized"
      | "isReleased"
      | "isVaultDataSet"
      | "owner"
      | "releaseVault"
      | "removeAuthorizedContact"
      | "setDataEncrypt"
      | "updateVaultName"
      | "vaultName"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ContactAuthorized"
      | "ContactRevoked"
      | "VaultDataRetrieved"
      | "VaultDataStored"
      | "VaultNameUpdated"
      | "VaultReleased"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addAuthorizedContact",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "debugAuth", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getAllAuthorizedContacts",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getOwner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getVaultData",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getVaultInfo",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isContactAuthorized",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isReleased",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isVaultDataSet",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "releaseVault",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeAuthorizedContact",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setDataEncrypt",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateVaultName",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "vaultName", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "addAuthorizedContact",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "debugAuth", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAllAuthorizedContacts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getVaultData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVaultInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isContactAuthorized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isReleased", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isVaultDataSet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "releaseVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeAuthorizedContact",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDataEncrypt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateVaultName",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vaultName", data: BytesLike): Result;
}

export namespace ContactAuthorizedEvent {
  export type InputTuple = [contact: AddressLike, by: AddressLike];
  export type OutputTuple = [contact: string, by: string];
  export interface OutputObject {
    contact: string;
    by: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ContactRevokedEvent {
  export type InputTuple = [contact: AddressLike, by: AddressLike];
  export type OutputTuple = [contact: string, by: string];
  export interface OutputObject {
    contact: string;
    by: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VaultDataRetrievedEvent {
  export type InputTuple = [by: AddressLike];
  export type OutputTuple = [by: string];
  export interface OutputObject {
    by: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VaultDataStoredEvent {
  export type InputTuple = [by: AddressLike];
  export type OutputTuple = [by: string];
  export interface OutputObject {
    by: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VaultNameUpdatedEvent {
  export type InputTuple = [newName: string, by: AddressLike];
  export type OutputTuple = [newName: string, by: string];
  export interface OutputObject {
    newName: string;
    by: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VaultReleasedEvent {
  export type InputTuple = [by: AddressLike];
  export type OutputTuple = [by: string];
  export interface OutputObject {
    by: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Vault extends BaseContract {
  connect(runner?: ContractRunner | null): Vault;
  waitForDeployment(): Promise<this>;

  interface: VaultInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addAuthorizedContact: TypedContractMethod<
    [_contact: AddressLike],
    [void],
    "nonpayable"
  >;

  debugAuth: TypedContractMethod<
    [],
    [
      [string, string, boolean, boolean, boolean, boolean] & {
        sender: string;
        contractOwner: string;
        isOwnerMatch: boolean;
        isInContacts: boolean;
        vaultReleased: boolean;
        shouldPass: boolean;
      }
    ],
    "view"
  >;

  getAllAuthorizedContacts: TypedContractMethod<[], [string[]], "view">;

  getOwner: TypedContractMethod<[], [string], "view">;

  getVaultData: TypedContractMethod<[], [string], "nonpayable">;

  getVaultInfo: TypedContractMethod<
    [],
    [
      [string, string, boolean, boolean, bigint] & {
        _owner: string;
        _name: string;
        _released: boolean;
        _dataSet: boolean;
        _contactCount: bigint;
      }
    ],
    "view"
  >;

  isContactAuthorized: TypedContractMethod<
    [_contact: AddressLike],
    [boolean],
    "view"
  >;

  isReleased: TypedContractMethod<[], [boolean], "view">;

  isVaultDataSet: TypedContractMethod<[], [boolean], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  releaseVault: TypedContractMethod<[], [void], "nonpayable">;

  removeAuthorizedContact: TypedContractMethod<
    [_contact: AddressLike],
    [void],
    "nonpayable"
  >;

  setDataEncrypt: TypedContractMethod<
    [_encryptedData: BytesLike],
    [void],
    "nonpayable"
  >;

  updateVaultName: TypedContractMethod<
    [_newName: string],
    [void],
    "nonpayable"
  >;

  vaultName: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addAuthorizedContact"
  ): TypedContractMethod<[_contact: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "debugAuth"
  ): TypedContractMethod<
    [],
    [
      [string, string, boolean, boolean, boolean, boolean] & {
        sender: string;
        contractOwner: string;
        isOwnerMatch: boolean;
        isInContacts: boolean;
        vaultReleased: boolean;
        shouldPass: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getAllAuthorizedContacts"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getOwner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getVaultData"
  ): TypedContractMethod<[], [string], "nonpayable">;
  getFunction(
    nameOrSignature: "getVaultInfo"
  ): TypedContractMethod<
    [],
    [
      [string, string, boolean, boolean, bigint] & {
        _owner: string;
        _name: string;
        _released: boolean;
        _dataSet: boolean;
        _contactCount: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "isContactAuthorized"
  ): TypedContractMethod<[_contact: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isReleased"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "isVaultDataSet"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "releaseVault"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "removeAuthorizedContact"
  ): TypedContractMethod<[_contact: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setDataEncrypt"
  ): TypedContractMethod<[_encryptedData: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateVaultName"
  ): TypedContractMethod<[_newName: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "vaultName"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "ContactAuthorized"
  ): TypedContractEvent<
    ContactAuthorizedEvent.InputTuple,
    ContactAuthorizedEvent.OutputTuple,
    ContactAuthorizedEvent.OutputObject
  >;
  getEvent(
    key: "ContactRevoked"
  ): TypedContractEvent<
    ContactRevokedEvent.InputTuple,
    ContactRevokedEvent.OutputTuple,
    ContactRevokedEvent.OutputObject
  >;
  getEvent(
    key: "VaultDataRetrieved"
  ): TypedContractEvent<
    VaultDataRetrievedEvent.InputTuple,
    VaultDataRetrievedEvent.OutputTuple,
    VaultDataRetrievedEvent.OutputObject
  >;
  getEvent(
    key: "VaultDataStored"
  ): TypedContractEvent<
    VaultDataStoredEvent.InputTuple,
    VaultDataStoredEvent.OutputTuple,
    VaultDataStoredEvent.OutputObject
  >;
  getEvent(
    key: "VaultNameUpdated"
  ): TypedContractEvent<
    VaultNameUpdatedEvent.InputTuple,
    VaultNameUpdatedEvent.OutputTuple,
    VaultNameUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "VaultReleased"
  ): TypedContractEvent<
    VaultReleasedEvent.InputTuple,
    VaultReleasedEvent.OutputTuple,
    VaultReleasedEvent.OutputObject
  >;

  filters: {
    "ContactAuthorized(address,address)": TypedContractEvent<
      ContactAuthorizedEvent.InputTuple,
      ContactAuthorizedEvent.OutputTuple,
      ContactAuthorizedEvent.OutputObject
    >;
    ContactAuthorized: TypedContractEvent<
      ContactAuthorizedEvent.InputTuple,
      ContactAuthorizedEvent.OutputTuple,
      ContactAuthorizedEvent.OutputObject
    >;

    "ContactRevoked(address,address)": TypedContractEvent<
      ContactRevokedEvent.InputTuple,
      ContactRevokedEvent.OutputTuple,
      ContactRevokedEvent.OutputObject
    >;
    ContactRevoked: TypedContractEvent<
      ContactRevokedEvent.InputTuple,
      ContactRevokedEvent.OutputTuple,
      ContactRevokedEvent.OutputObject
    >;

    "VaultDataRetrieved(address)": TypedContractEvent<
      VaultDataRetrievedEvent.InputTuple,
      VaultDataRetrievedEvent.OutputTuple,
      VaultDataRetrievedEvent.OutputObject
    >;
    VaultDataRetrieved: TypedContractEvent<
      VaultDataRetrievedEvent.InputTuple,
      VaultDataRetrievedEvent.OutputTuple,
      VaultDataRetrievedEvent.OutputObject
    >;

    "VaultDataStored(address)": TypedContractEvent<
      VaultDataStoredEvent.InputTuple,
      VaultDataStoredEvent.OutputTuple,
      VaultDataStoredEvent.OutputObject
    >;
    VaultDataStored: TypedContractEvent<
      VaultDataStoredEvent.InputTuple,
      VaultDataStoredEvent.OutputTuple,
      VaultDataStoredEvent.OutputObject
    >;

    "VaultNameUpdated(string,address)": TypedContractEvent<
      VaultNameUpdatedEvent.InputTuple,
      VaultNameUpdatedEvent.OutputTuple,
      VaultNameUpdatedEvent.OutputObject
    >;
    VaultNameUpdated: TypedContractEvent<
      VaultNameUpdatedEvent.InputTuple,
      VaultNameUpdatedEvent.OutputTuple,
      VaultNameUpdatedEvent.OutputObject
    >;

    "VaultReleased(address)": TypedContractEvent<
      VaultReleasedEvent.InputTuple,
      VaultReleasedEvent.OutputTuple,
      VaultReleasedEvent.OutputObject
    >;
    VaultReleased: TypedContractEvent<
      VaultReleasedEvent.InputTuple,
      VaultReleasedEvent.OutputTuple,
      VaultReleasedEvent.OutputObject
    >;
  };
}
