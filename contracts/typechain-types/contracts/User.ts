/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface UserInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addContact"
      | "addVault"
      | "contacts"
      | "createDeathDeclaration"
      | "deathDeclaration"
      | "finalizeDeathDeclaration"
      | "getBasicUserData"
      | "getBirthDate"
      | "getContactAtIndex"
      | "getContactCount"
      | "getContacts"
      | "getCreatedAt"
      | "getDeathDeclaration"
      | "getDeathDeclarationStatus"
      | "getEmail"
      | "getFirstname"
      | "getGraceInterval"
      | "getHasVotingRight"
      | "getIsIdVerified"
      | "getLastUpdated"
      | "getLastname"
      | "getOwner"
      | "getStatus"
      | "getUserData"
      | "getVaultAtIndex"
      | "getVaultCount"
      | "getVaults"
      | "getVaultsAndContacts"
      | "hasDeathDeclaration"
      | "hasVoted"
      | "isContact"
      | "isVault"
      | "removeContact"
      | "removeVault"
      | "setBirthDate"
      | "setEmail"
      | "setFirstname"
      | "setGraceInterval"
      | "setHasVotingRight"
      | "setIsIdVerified"
      | "setLastname"
      | "setOwner"
      | "setStatus"
      | "userData"
      | "vaults"
      | "voteOnDeathDeclaration"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ConsensusReached"
      | "ContactAdded"
      | "ContactRemoved"
      | "DeathDeclarationCreated"
      | "IdVerificationUpdated"
      | "OwnerChanged"
      | "UserProfileUpdated"
      | "UserStatusChanged"
      | "VaultAdded"
      | "VaultRemoved"
      | "VoteCast"
      | "VotingRightsUpdated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addContact",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "addVault",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "contacts",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createDeathDeclaration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deathDeclaration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "finalizeDeathDeclaration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBasicUserData",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBirthDate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getContactAtIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getContactCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getContacts",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCreatedAt",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDeathDeclaration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDeathDeclarationStatus",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getEmail", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getFirstname",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getGraceInterval",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getHasVotingRight",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getIsIdVerified",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLastUpdated",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLastname",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getOwner", values?: undefined): string;
  encodeFunctionData(functionFragment: "getStatus", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getUserData",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getVaultAtIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getVaultCount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getVaults", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getVaultsAndContacts",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "hasDeathDeclaration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "hasVoted",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isContact",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isVault",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeContact",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeVault",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setBirthDate",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "setEmail", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setFirstname",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setGraceInterval",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setHasVotingRight",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setIsIdVerified",
    values: [boolean]
  ): string;
  encodeFunctionData(functionFragment: "setLastname", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setOwner",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setStatus",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "userData", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "vaults",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "voteOnDeathDeclaration",
    values: [boolean]
  ): string;

  decodeFunctionResult(functionFragment: "addContact", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addVault", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "contacts", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createDeathDeclaration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deathDeclaration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "finalizeDeathDeclaration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBasicUserData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBirthDate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContactAtIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContactCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContacts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCreatedAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDeathDeclaration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDeathDeclarationStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getEmail", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getFirstname",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGraceInterval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getHasVotingRight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getIsIdVerified",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLastUpdated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLastname",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getOwner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getStatus", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getUserData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVaultAtIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVaultCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getVaults", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getVaultsAndContacts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasDeathDeclaration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasVoted", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isContact", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isVault", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeContact",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBirthDate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setEmail", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setFirstname",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGraceInterval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setHasVotingRight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setIsIdVerified",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLastname",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setOwner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setStatus", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "userData", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "vaults", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "voteOnDeathDeclaration",
    data: BytesLike
  ): Result;
}

export namespace ConsensusReachedEvent {
  export type InputTuple = [consensusReachedAt: BigNumberish];
  export type OutputTuple = [consensusReachedAt: bigint];
  export interface OutputObject {
    consensusReachedAt: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ContactAddedEvent {
  export type InputTuple = [contact: AddressLike];
  export type OutputTuple = [contact: string];
  export interface OutputObject {
    contact: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ContactRemovedEvent {
  export type InputTuple = [contact: AddressLike];
  export type OutputTuple = [contact: string];
  export interface OutputObject {
    contact: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DeathDeclarationCreatedEvent {
  export type InputTuple = [declaredBy: AddressLike, declaredAt: BigNumberish];
  export type OutputTuple = [declaredBy: string, declaredAt: bigint];
  export interface OutputObject {
    declaredBy: string;
    declaredAt: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace IdVerificationUpdatedEvent {
  export type InputTuple = [isIdVerified: boolean];
  export type OutputTuple = [isIdVerified: boolean];
  export interface OutputObject {
    isIdVerified: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnerChangedEvent {
  export type InputTuple = [oldOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [oldOwner: string, newOwner: string];
  export interface OutputObject {
    oldOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UserProfileUpdatedEvent {
  export type InputTuple = [
    firstname: string,
    lastname: string,
    email: string,
    birthDate: string
  ];
  export type OutputTuple = [
    firstname: string,
    lastname: string,
    email: string,
    birthDate: string
  ];
  export interface OutputObject {
    firstname: string;
    lastname: string;
    email: string;
    birthDate: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UserStatusChangedEvent {
  export type InputTuple = [status: BigNumberish];
  export type OutputTuple = [status: bigint];
  export interface OutputObject {
    status: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VaultAddedEvent {
  export type InputTuple = [vault: AddressLike];
  export type OutputTuple = [vault: string];
  export interface OutputObject {
    vault: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VaultRemovedEvent {
  export type InputTuple = [vault: AddressLike];
  export type OutputTuple = [vault: string];
  export interface OutputObject {
    vault: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VoteCastEvent {
  export type InputTuple = [
    voter: AddressLike,
    voted: boolean,
    votedAt: BigNumberish
  ];
  export type OutputTuple = [voter: string, voted: boolean, votedAt: bigint];
  export interface OutputObject {
    voter: string;
    voted: boolean;
    votedAt: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VotingRightsUpdatedEvent {
  export type InputTuple = [hasVotingRight: boolean];
  export type OutputTuple = [hasVotingRight: boolean];
  export interface OutputObject {
    hasVotingRight: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface User extends BaseContract {
  connect(runner?: ContractRunner | null): User;
  waitForDeployment(): Promise<this>;

  interface: UserInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addContact: TypedContractMethod<
    [_contact: AddressLike],
    [void],
    "nonpayable"
  >;

  addVault: TypedContractMethod<[_vault: AddressLike], [void], "nonpayable">;

  contacts: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  createDeathDeclaration: TypedContractMethod<[], [void], "nonpayable">;

  deathDeclaration: TypedContractMethod<
    [],
    [
      [string, bigint, boolean, bigint] & {
        declaredBy: string;
        declaredAt: bigint;
        consensusReached: boolean;
        consensusReachedAt: bigint;
      }
    ],
    "view"
  >;

  finalizeDeathDeclaration: TypedContractMethod<[], [void], "nonpayable">;

  getBasicUserData: TypedContractMethod<
    [],
    [
      [
        string,
        string,
        string,
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean,
        boolean
      ] & {
        owner: string;
        firstname: string;
        lastname: string;
        email: string;
        birthDate: string;
        status: bigint;
        graceInterval: bigint;
        createdAt: bigint;
        lastUpdated: bigint;
        hasVotingRight: boolean;
        isIdVerified: boolean;
      }
    ],
    "view"
  >;

  getBirthDate: TypedContractMethod<[], [string], "view">;

  getContactAtIndex: TypedContractMethod<
    [index: BigNumberish],
    [string],
    "view"
  >;

  getContactCount: TypedContractMethod<[], [bigint], "view">;

  getContacts: TypedContractMethod<[], [string[]], "view">;

  getCreatedAt: TypedContractMethod<[], [bigint], "view">;

  getDeathDeclaration: TypedContractMethod<
    [],
    [
      [string, bigint, string[], boolean, bigint] & {
        declaredBy: string;
        declaredAt: bigint;
        voters: string[];
        consensusReached: boolean;
        consensusReachedAt: bigint;
      }
    ],
    "view"
  >;

  getDeathDeclarationStatus: TypedContractMethod<[], [boolean], "view">;

  getEmail: TypedContractMethod<[], [string], "view">;

  getFirstname: TypedContractMethod<[], [string], "view">;

  getGraceInterval: TypedContractMethod<[], [bigint], "view">;

  getHasVotingRight: TypedContractMethod<[], [boolean], "view">;

  getIsIdVerified: TypedContractMethod<[], [boolean], "view">;

  getLastUpdated: TypedContractMethod<[], [bigint], "view">;

  getLastname: TypedContractMethod<[], [string], "view">;

  getOwner: TypedContractMethod<[], [string], "view">;

  getStatus: TypedContractMethod<[], [bigint], "view">;

  getUserData: TypedContractMethod<
    [],
    [
      [
        string,
        string,
        string,
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean,
        boolean,
        string[],
        string[],
        boolean
      ] & {
        owner: string;
        firstname: string;
        lastname: string;
        email: string;
        birthDate: string;
        status: bigint;
        graceInterval: bigint;
        createdAt: bigint;
        lastUpdated: bigint;
        hasVotingRight: boolean;
        isIdVerified: boolean;
        userVaults: string[];
        userContacts: string[];
        hasDeathDecl: boolean;
      }
    ],
    "view"
  >;

  getVaultAtIndex: TypedContractMethod<[index: BigNumberish], [string], "view">;

  getVaultCount: TypedContractMethod<[], [bigint], "view">;

  getVaults: TypedContractMethod<[], [string[]], "view">;

  getVaultsAndContacts: TypedContractMethod<
    [],
    [[string[], string[]] & { userVaults: string[]; userContacts: string[] }],
    "view"
  >;

  hasDeathDeclaration: TypedContractMethod<[], [boolean], "view">;

  hasVoted: TypedContractMethod<[voter: AddressLike], [boolean], "view">;

  isContact: TypedContractMethod<[_contact: AddressLike], [boolean], "view">;

  isVault: TypedContractMethod<[_vault: AddressLike], [boolean], "view">;

  removeContact: TypedContractMethod<
    [_contact: AddressLike],
    [void],
    "nonpayable"
  >;

  removeVault: TypedContractMethod<[_vault: AddressLike], [void], "nonpayable">;

  setBirthDate: TypedContractMethod<[_birthDate: string], [void], "nonpayable">;

  setEmail: TypedContractMethod<[_email: string], [void], "nonpayable">;

  setFirstname: TypedContractMethod<[_firstname: string], [void], "nonpayable">;

  setGraceInterval: TypedContractMethod<
    [_graceInterval: BigNumberish],
    [void],
    "nonpayable"
  >;

  setHasVotingRight: TypedContractMethod<
    [_hasVotingRight: boolean],
    [void],
    "nonpayable"
  >;

  setIsIdVerified: TypedContractMethod<
    [_isIdVerified: boolean],
    [void],
    "nonpayable"
  >;

  setLastname: TypedContractMethod<[_lastname: string], [void], "nonpayable">;

  setOwner: TypedContractMethod<[_newOwner: AddressLike], [void], "nonpayable">;

  setStatus: TypedContractMethod<[_status: BigNumberish], [void], "nonpayable">;

  userData: TypedContractMethod<
    [],
    [
      [
        string,
        string,
        string,
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean,
        boolean
      ] & {
        owner: string;
        firstname: string;
        lastname: string;
        email: string;
        birthDate: string;
        status: bigint;
        graceInterval: bigint;
        createdAt: bigint;
        lastUpdated: bigint;
        hasVotingRight: boolean;
        isIdVerified: boolean;
      }
    ],
    "view"
  >;

  vaults: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  voteOnDeathDeclaration: TypedContractMethod<
    [_voted: boolean],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addContact"
  ): TypedContractMethod<[_contact: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "addVault"
  ): TypedContractMethod<[_vault: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "contacts"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "createDeathDeclaration"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "deathDeclaration"
  ): TypedContractMethod<
    [],
    [
      [string, bigint, boolean, bigint] & {
        declaredBy: string;
        declaredAt: bigint;
        consensusReached: boolean;
        consensusReachedAt: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "finalizeDeathDeclaration"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getBasicUserData"
  ): TypedContractMethod<
    [],
    [
      [
        string,
        string,
        string,
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean,
        boolean
      ] & {
        owner: string;
        firstname: string;
        lastname: string;
        email: string;
        birthDate: string;
        status: bigint;
        graceInterval: bigint;
        createdAt: bigint;
        lastUpdated: bigint;
        hasVotingRight: boolean;
        isIdVerified: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getBirthDate"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getContactAtIndex"
  ): TypedContractMethod<[index: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getContactCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getContacts"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getCreatedAt"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getDeathDeclaration"
  ): TypedContractMethod<
    [],
    [
      [string, bigint, string[], boolean, bigint] & {
        declaredBy: string;
        declaredAt: bigint;
        voters: string[];
        consensusReached: boolean;
        consensusReachedAt: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getDeathDeclarationStatus"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "getEmail"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getFirstname"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getGraceInterval"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getHasVotingRight"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "getIsIdVerified"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "getLastUpdated"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getLastname"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getOwner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getStatus"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getUserData"
  ): TypedContractMethod<
    [],
    [
      [
        string,
        string,
        string,
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean,
        boolean,
        string[],
        string[],
        boolean
      ] & {
        owner: string;
        firstname: string;
        lastname: string;
        email: string;
        birthDate: string;
        status: bigint;
        graceInterval: bigint;
        createdAt: bigint;
        lastUpdated: bigint;
        hasVotingRight: boolean;
        isIdVerified: boolean;
        userVaults: string[];
        userContacts: string[];
        hasDeathDecl: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getVaultAtIndex"
  ): TypedContractMethod<[index: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getVaultCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getVaults"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getVaultsAndContacts"
  ): TypedContractMethod<
    [],
    [[string[], string[]] & { userVaults: string[]; userContacts: string[] }],
    "view"
  >;
  getFunction(
    nameOrSignature: "hasDeathDeclaration"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "hasVoted"
  ): TypedContractMethod<[voter: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isContact"
  ): TypedContractMethod<[_contact: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isVault"
  ): TypedContractMethod<[_vault: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "removeContact"
  ): TypedContractMethod<[_contact: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "removeVault"
  ): TypedContractMethod<[_vault: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setBirthDate"
  ): TypedContractMethod<[_birthDate: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setEmail"
  ): TypedContractMethod<[_email: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setFirstname"
  ): TypedContractMethod<[_firstname: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setGraceInterval"
  ): TypedContractMethod<[_graceInterval: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setHasVotingRight"
  ): TypedContractMethod<[_hasVotingRight: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setIsIdVerified"
  ): TypedContractMethod<[_isIdVerified: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setLastname"
  ): TypedContractMethod<[_lastname: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setOwner"
  ): TypedContractMethod<[_newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setStatus"
  ): TypedContractMethod<[_status: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "userData"
  ): TypedContractMethod<
    [],
    [
      [
        string,
        string,
        string,
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean,
        boolean
      ] & {
        owner: string;
        firstname: string;
        lastname: string;
        email: string;
        birthDate: string;
        status: bigint;
        graceInterval: bigint;
        createdAt: bigint;
        lastUpdated: bigint;
        hasVotingRight: boolean;
        isIdVerified: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "vaults"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "voteOnDeathDeclaration"
  ): TypedContractMethod<[_voted: boolean], [void], "nonpayable">;

  getEvent(
    key: "ConsensusReached"
  ): TypedContractEvent<
    ConsensusReachedEvent.InputTuple,
    ConsensusReachedEvent.OutputTuple,
    ConsensusReachedEvent.OutputObject
  >;
  getEvent(
    key: "ContactAdded"
  ): TypedContractEvent<
    ContactAddedEvent.InputTuple,
    ContactAddedEvent.OutputTuple,
    ContactAddedEvent.OutputObject
  >;
  getEvent(
    key: "ContactRemoved"
  ): TypedContractEvent<
    ContactRemovedEvent.InputTuple,
    ContactRemovedEvent.OutputTuple,
    ContactRemovedEvent.OutputObject
  >;
  getEvent(
    key: "DeathDeclarationCreated"
  ): TypedContractEvent<
    DeathDeclarationCreatedEvent.InputTuple,
    DeathDeclarationCreatedEvent.OutputTuple,
    DeathDeclarationCreatedEvent.OutputObject
  >;
  getEvent(
    key: "IdVerificationUpdated"
  ): TypedContractEvent<
    IdVerificationUpdatedEvent.InputTuple,
    IdVerificationUpdatedEvent.OutputTuple,
    IdVerificationUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "OwnerChanged"
  ): TypedContractEvent<
    OwnerChangedEvent.InputTuple,
    OwnerChangedEvent.OutputTuple,
    OwnerChangedEvent.OutputObject
  >;
  getEvent(
    key: "UserProfileUpdated"
  ): TypedContractEvent<
    UserProfileUpdatedEvent.InputTuple,
    UserProfileUpdatedEvent.OutputTuple,
    UserProfileUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "UserStatusChanged"
  ): TypedContractEvent<
    UserStatusChangedEvent.InputTuple,
    UserStatusChangedEvent.OutputTuple,
    UserStatusChangedEvent.OutputObject
  >;
  getEvent(
    key: "VaultAdded"
  ): TypedContractEvent<
    VaultAddedEvent.InputTuple,
    VaultAddedEvent.OutputTuple,
    VaultAddedEvent.OutputObject
  >;
  getEvent(
    key: "VaultRemoved"
  ): TypedContractEvent<
    VaultRemovedEvent.InputTuple,
    VaultRemovedEvent.OutputTuple,
    VaultRemovedEvent.OutputObject
  >;
  getEvent(
    key: "VoteCast"
  ): TypedContractEvent<
    VoteCastEvent.InputTuple,
    VoteCastEvent.OutputTuple,
    VoteCastEvent.OutputObject
  >;
  getEvent(
    key: "VotingRightsUpdated"
  ): TypedContractEvent<
    VotingRightsUpdatedEvent.InputTuple,
    VotingRightsUpdatedEvent.OutputTuple,
    VotingRightsUpdatedEvent.OutputObject
  >;

  filters: {
    "ConsensusReached(uint64)": TypedContractEvent<
      ConsensusReachedEvent.InputTuple,
      ConsensusReachedEvent.OutputTuple,
      ConsensusReachedEvent.OutputObject
    >;
    ConsensusReached: TypedContractEvent<
      ConsensusReachedEvent.InputTuple,
      ConsensusReachedEvent.OutputTuple,
      ConsensusReachedEvent.OutputObject
    >;

    "ContactAdded(address)": TypedContractEvent<
      ContactAddedEvent.InputTuple,
      ContactAddedEvent.OutputTuple,
      ContactAddedEvent.OutputObject
    >;
    ContactAdded: TypedContractEvent<
      ContactAddedEvent.InputTuple,
      ContactAddedEvent.OutputTuple,
      ContactAddedEvent.OutputObject
    >;

    "ContactRemoved(address)": TypedContractEvent<
      ContactRemovedEvent.InputTuple,
      ContactRemovedEvent.OutputTuple,
      ContactRemovedEvent.OutputObject
    >;
    ContactRemoved: TypedContractEvent<
      ContactRemovedEvent.InputTuple,
      ContactRemovedEvent.OutputTuple,
      ContactRemovedEvent.OutputObject
    >;

    "DeathDeclarationCreated(address,uint64)": TypedContractEvent<
      DeathDeclarationCreatedEvent.InputTuple,
      DeathDeclarationCreatedEvent.OutputTuple,
      DeathDeclarationCreatedEvent.OutputObject
    >;
    DeathDeclarationCreated: TypedContractEvent<
      DeathDeclarationCreatedEvent.InputTuple,
      DeathDeclarationCreatedEvent.OutputTuple,
      DeathDeclarationCreatedEvent.OutputObject
    >;

    "IdVerificationUpdated(bool)": TypedContractEvent<
      IdVerificationUpdatedEvent.InputTuple,
      IdVerificationUpdatedEvent.OutputTuple,
      IdVerificationUpdatedEvent.OutputObject
    >;
    IdVerificationUpdated: TypedContractEvent<
      IdVerificationUpdatedEvent.InputTuple,
      IdVerificationUpdatedEvent.OutputTuple,
      IdVerificationUpdatedEvent.OutputObject
    >;

    "OwnerChanged(address,address)": TypedContractEvent<
      OwnerChangedEvent.InputTuple,
      OwnerChangedEvent.OutputTuple,
      OwnerChangedEvent.OutputObject
    >;
    OwnerChanged: TypedContractEvent<
      OwnerChangedEvent.InputTuple,
      OwnerChangedEvent.OutputTuple,
      OwnerChangedEvent.OutputObject
    >;

    "UserProfileUpdated(string,string,string,string)": TypedContractEvent<
      UserProfileUpdatedEvent.InputTuple,
      UserProfileUpdatedEvent.OutputTuple,
      UserProfileUpdatedEvent.OutputObject
    >;
    UserProfileUpdated: TypedContractEvent<
      UserProfileUpdatedEvent.InputTuple,
      UserProfileUpdatedEvent.OutputTuple,
      UserProfileUpdatedEvent.OutputObject
    >;

    "UserStatusChanged(uint8)": TypedContractEvent<
      UserStatusChangedEvent.InputTuple,
      UserStatusChangedEvent.OutputTuple,
      UserStatusChangedEvent.OutputObject
    >;
    UserStatusChanged: TypedContractEvent<
      UserStatusChangedEvent.InputTuple,
      UserStatusChangedEvent.OutputTuple,
      UserStatusChangedEvent.OutputObject
    >;

    "VaultAdded(address)": TypedContractEvent<
      VaultAddedEvent.InputTuple,
      VaultAddedEvent.OutputTuple,
      VaultAddedEvent.OutputObject
    >;
    VaultAdded: TypedContractEvent<
      VaultAddedEvent.InputTuple,
      VaultAddedEvent.OutputTuple,
      VaultAddedEvent.OutputObject
    >;

    "VaultRemoved(address)": TypedContractEvent<
      VaultRemovedEvent.InputTuple,
      VaultRemovedEvent.OutputTuple,
      VaultRemovedEvent.OutputObject
    >;
    VaultRemoved: TypedContractEvent<
      VaultRemovedEvent.InputTuple,
      VaultRemovedEvent.OutputTuple,
      VaultRemovedEvent.OutputObject
    >;

    "VoteCast(address,bool,uint64)": TypedContractEvent<
      VoteCastEvent.InputTuple,
      VoteCastEvent.OutputTuple,
      VoteCastEvent.OutputObject
    >;
    VoteCast: TypedContractEvent<
      VoteCastEvent.InputTuple,
      VoteCastEvent.OutputTuple,
      VoteCastEvent.OutputObject
    >;

    "VotingRightsUpdated(bool)": TypedContractEvent<
      VotingRightsUpdatedEvent.InputTuple,
      VotingRightsUpdatedEvent.OutputTuple,
      VotingRightsUpdatedEvent.OutputObject
    >;
    VotingRightsUpdated: TypedContractEvent<
      VotingRightsUpdatedEvent.InputTuple,
      VotingRightsUpdatedEvent.OutputTuple,
      VotingRightsUpdatedEvent.OutputObject
    >;
  };
}
